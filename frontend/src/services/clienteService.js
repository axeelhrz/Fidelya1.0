import axios from 'axios';
import config from '../config/config';

// URL base del backend Flask
const API_URL = config.API_BASE_URL;

// Configurar instancia de axios con configuraciones base
const api = axios.create({
  baseURL: API_URL,
  timeout: 15000,
  headers: {
    'Content-Type': 'application/json',
  },
  withCredentials: false,
});

// Interceptor para agregar token autom√°ticamente a las peticiones
api.interceptors.request.use(
  (config) => {
    console.log('üì§ Enviando petici√≥n a:', config.baseURL + config.url);
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    console.error('Error en interceptor de request:', error);
    return Promise.reject(error);
  }
);

// Interceptor para manejar respuestas y errores globalmente
api.interceptors.response.use(
  (response) => {
    console.log('üì• Respuesta recibida:', response.status, response.config.url);
    return response;
  },
  (error) => {
    console.error('‚ùå Error en respuesta:', error);
    
    if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
      console.error('Error de CORS o conexi√≥n:', error);
      return Promise.reject({
        message: 'Error de conexi√≥n. Verifica que el servidor est√© funcionando en puerto 5001.',
        type: 'NETWORK_ERROR'
      });
    }
    
    if (error.response?.status === 401) {
      localStorage.removeItem('token');
      localStorage.removeItem('rememberUser');
      if (window.location.pathname !== '/login') {
        window.location.href = '/login';
      }
    }
    
    return Promise.reject(error);
  }
);

/**
 * Obtiene todos los clientes con filtros opcionales
 * @param {string} searchQuery - T√©rmino de b√∫squeda opcional
 * @returns {Array} - Lista de clientes
 */
export const obtenerClientes = async (searchQuery = '') => {
  try {
    console.log('üë• Obteniendo clientes...');
    const url = searchQuery ? `/clientes?q=${encodeURIComponent(searchQuery)}` : '/clientes';
    const response = await api.get(url);
    console.log('‚úÖ Clientes obtenidos:', response.data.length);
    return response.data;
  } catch (error) {
    console.error('‚ùå Error obteniendo clientes:', error);
    if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
      throw { message: 'Error de conexi√≥n. Verifica que el servidor est√© funcionando en puerto 5001.' };
    }
    throw error.response?.data || { message: 'Error obteniendo clientes' };
  }
};

/**
 * Crea un nuevo cliente
 * @param {Object} clienteData - Datos del cliente
 * @returns {Object} - Respuesta del servidor
 */
export const crearCliente = async (clienteData) => {
  try {
    console.log('üë• Creando cliente:', clienteData);
    const response = await api.post('/clientes', clienteData);
    console.log('‚úÖ Cliente creado exitosamente');
    return response.data;
  } catch (error) {
    console.error('‚ùå Error creando cliente:', error);
    if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
      throw { message: 'Error de conexi√≥n. Verifica que el servidor est√© funcionando en puerto 5001.' };
    }
    throw error.response?.data || { message: 'Error creando cliente' };
  }
};

/**
 * Actualiza un cliente existente
 * @param {number} clienteId - ID del cliente
 * @param {Object} clienteData - Datos actualizados del cliente
 * @returns {Object} - Respuesta del servidor
 */
export const actualizarCliente = async (clienteId, clienteData) => {
  try {
    console.log('üë• Actualizando cliente:', clienteId, clienteData);
    const response = await api.put(`/clientes/${clienteId}`, clienteData);
    console.log('‚úÖ Cliente actualizado exitosamente');
    return response.data;
  } catch (error) {
    console.error('‚ùå Error actualizando cliente:', error);
    if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
      throw { message: 'Error de conexi√≥n. Verifica que el servidor est√© funcionando en puerto 5001.' };
    }
    throw error.response?.data || { message: 'Error actualizando cliente' };
  }
};

/**
 * Elimina un cliente
 * @param {number} clienteId - ID del cliente a eliminar
 * @returns {Object} - Respuesta del servidor
 */
export const eliminarCliente = async (clienteId) => {
  try {
    console.log('üë• Eliminando cliente:', clienteId);
    const response = await api.delete(`/clientes/${clienteId}`);
    console.log('‚úÖ Cliente eliminado exitosamente');
    return response.data;
  } catch (error) {
    console.error('‚ùå Error eliminando cliente:', error);
    if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
      throw { message: 'Error de conexi√≥n. Verifica que el servidor est√© funcionando en puerto 5001.' };
    }
    throw error.response?.data || { message: 'Error eliminando cliente' };
  }
};

/**
 * Busca clientes por nombre, correo o tel√©fono
 * @param {string} searchQuery - T√©rmino de b√∫squeda
 * @returns {Array} - Lista de clientes encontrados
 */
export const buscarClientes = async (searchQuery) => {
  try {
    console.log('üîç Buscando clientes:', searchQuery);
    const response = await api.get(`/clientes/search?q=${encodeURIComponent(searchQuery)}`);
    console.log('‚úÖ B√∫squeda completada:', response.data.length, 'resultados');
    return response.data;
  } catch (error) {
    console.error('‚ùå Error buscando clientes:', error);
    if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
      throw { message: 'Error de conexi√≥n. Verifica que el servidor est√© funcionando en puerto 5001.' };
    }
    throw error.response?.data || { message: 'Error buscando clientes' };
  }
};

/**
 * Obtiene estad√≠sticas de clientes
 * @returns {Object} - Estad√≠sticas de clientes
 */
export const obtenerEstadisticasClientes = async () => {
  try {
    console.log('üìä Obteniendo estad√≠sticas de clientes...');
    const response = await api.get('/clientes/estadisticas');
    console.log('‚úÖ Estad√≠sticas obtenidas');
    return response.data;
  } catch (error) {
    console.error('‚ùå Error obteniendo estad√≠sticas:', error);
    if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
      throw { message: 'Error de conexi√≥n. Verifica que el servidor est√© funcionando en puerto 5001.' };
    }
    throw error.response?.data || { message: 'Error obteniendo estad√≠sticas' };
  }
};

// Objeto principal del servicio de clientes
export const clienteService = {
  obtenerClientes,
  crearCliente,
  actualizarCliente,
  eliminarCliente,
  buscarClientes,
  obtenerEstadisticasClientes,
};

// Exportaci√≥n por defecto
export default clienteService;