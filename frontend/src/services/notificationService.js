import axios from 'axios';
import config from '../config/config';

// URL base del backend Flask
const API_URL = config.API_BASE_URL;
console.log('üîî Notification API_URL configurada:', API_URL);

// Configurar instancia de axios
const api = axios.create({
  baseURL: API_URL,
  timeout: 15000,
  headers: {
    'Content-Type': 'application/json',
  },
  withCredentials: false,
});

// Interceptor para agregar token autom√°ticamente
api.interceptors.request.use(
  (config) => {
    console.log('üì§ Enviando petici√≥n de notificaciones a:', config.baseURL + config.url);
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    console.error('Error en interceptor de request:', error);
    return Promise.reject(error);
  }
);

// Interceptor para manejar respuestas
api.interceptors.response.use(
  (response) => {
    console.log('üì• Respuesta de notificaciones recibida:', response.status, response.config.url);
    return response;
  },
  (error) => {
    console.error('‚ùå Error en respuesta de notificaciones:', error);
    
    if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
      console.error('Error de CORS o conexi√≥n:', error);
      return Promise.reject({
        message: 'Error de conexi√≥n. Verifica que el servidor est√© funcionando en puerto 5001.',
        type: 'NETWORK_ERROR'
      });
    }
    
    if (error.response?.status === 401) {
      localStorage.removeItem('token');
      localStorage.removeItem('rememberUser');
      if (window.location.pathname !== '/login') {
        window.location.href = '/login';
      }
    }
    
    return Promise.reject(error);
  }
);

/**
 * Obtener todas las notificaciones del usuario
 * @param {object} filtros - Filtros opcionales
 * @returns {array} - Lista de notificaciones
 */
export const obtenerNotificaciones = async (filtros = {}) => {
  try {
    console.log('üîî Obteniendo notificaciones con filtros:', filtros);
    
    const params = new URLSearchParams();
    if (filtros.tipo) params.append('tipo', filtros.tipo);
    if (filtros.leida !== undefined) params.append('leida', filtros.leida);
    if (filtros.fecha_desde) params.append('fecha_desde', filtros.fecha_desde);
    if (filtros.fecha_hasta) params.append('fecha_hasta', filtros.fecha_hasta);
    if (filtros.limite) params.append('limite', filtros.limite);
    
    const response = await api.get(`/notificaciones?${params.toString()}`);
    console.log('‚úÖ Notificaciones obtenidas:', response.data.length);
    return response.data;
  } catch (error) {
    console.error('‚ùå Error obteniendo notificaciones:', error);
    return [];
  }
};

/**
 * Contar notificaciones no le√≠das
 * @returns {number} - Cantidad de notificaciones no le√≠das
 */
export const contarNoLeidas = async () => {
  try {
    console.log('üîî Contando notificaciones no le√≠das');
    const response = await api.get('/notificaciones/no-leidas');
    console.log('‚úÖ Notificaciones no le√≠das:', response.data.count);
    return response.data.count;
  } catch (error) {
    console.error('‚ùå Error contando notificaciones no le√≠das:', error);
    return 0;
  }
};

/**
 * Marcar notificaciones como le√≠das
 * @param {array} notificacionIds - IDs de notificaciones a marcar (opcional)
 * @returns {boolean} - √âxito de la operaci√≥n
 */
export const marcarComoLeidas = async (notificacionIds = null) => {
  try {
    console.log('üîî Marcando notificaciones como le√≠das:', notificacionIds);
    
    const data = notificacionIds ? { notificacion_ids: notificacionIds } : {};
    const response = await api.post('/notificaciones/marcar-leidas', data);
    
    console.log('‚úÖ Notificaciones marcadas como le√≠das');
    return true;
  } catch (error) {
    console.error('‚ùå Error marcando notificaciones como le√≠das:', error);
    throw error.response?.data || { message: 'Error marcando notificaciones como le√≠das' };
  }
};

/**
 * Enviar notificaci√≥n por email
 * @param {string} destinatario - Email del destinatario
 * @param {string} asunto - Asunto del email
 * @param {string} mensaje - Mensaje del email
 * @returns {boolean} - √âxito del env√≠o
 */
export const enviarEmail = async (destinatario, asunto, mensaje) => {
  try {
    console.log('üìß Enviando email a:', destinatario);
    
    const response = await api.post('/notificaciones/enviar-email', {
      destinatario,
      asunto,
      mensaje
    });
    
    console.log('‚úÖ Email enviado exitosamente');
    return true;
  } catch (error) {
    console.error('‚ùå Error enviando email:', error);
    throw error.response?.data || { message: 'Error enviando email' };
  }
};

/**
 * Enviar notificaci√≥n por SMS
 * @param {string} telefono - N√∫mero de tel√©fono
 * @param {string} mensaje - Mensaje del SMS
 * @returns {boolean} - √âxito del env√≠o
 */
export const enviarSMS = async (telefono, mensaje) => {
  try {
    console.log('üì± Enviando SMS a:', telefono);
    
    const response = await api.post('/notificaciones/enviar-sms', {
      telefono,
      mensaje
    });
    
    console.log('‚úÖ SMS enviado exitosamente');
    return true;
  } catch (error) {
    console.error('‚ùå Error enviando SMS:', error);
    throw error.response?.data || { message: 'Error enviando SMS' };
  }
};

/**
 * Obtener configuraci√≥n de notificaciones
 * @returns {object} - Configuraci√≥n del usuario
 */
export const obtenerConfiguracion = async () => {
  try {
    console.log('‚öôÔ∏è Obteniendo configuraci√≥n de notificaciones');
    const response = await api.get('/notificaciones/configuracion');
    console.log('‚úÖ Configuraci√≥n obtenida:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Error obteniendo configuraci√≥n:', error);
    return {
      recibir_email: true,
      recibir_sms: false,
      telefono: '',
      frecuencia: 'inmediata'
    };
  }
};

/**
 * Actualizar configuraci√≥n de notificaciones
 * @param {object} configuracion - Nueva configuraci√≥n
 * @returns {boolean} - √âxito de la actualizaci√≥n
 */
export const actualizarConfiguracion = async (configuracion) => {
  try {
    console.log('‚öôÔ∏è Actualizando configuraci√≥n de notificaciones:', configuracion);
    
    const response = await api.put('/notificaciones/configuracion', configuracion);
    console.log('‚úÖ Configuraci√≥n actualizada exitosamente');
    return true;
  } catch (error) {
    console.error('‚ùå Error actualizando configuraci√≥n:', error);
    throw error.response?.data || { message: 'Error actualizando configuraci√≥n' };
  }
};

/**
 * Verificar alertas autom√°ticas del sistema
 * @returns {object} - Resultado de la verificaci√≥n
 */
export const verificarAlertas = async () => {
  try {
    console.log('üîç Verificando alertas del sistema');
    const response = await api.post('/notificaciones/verificar-alertas');
    console.log('‚úÖ Alertas verificadas:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Error verificando alertas:', error);
    throw error.response?.data || { message: 'Error verificando alertas' };
  }
};

// Objeto principal del servicio de notificaciones
const notificationService = {
  obtenerNotificaciones,
  contarNoLeidas,
  marcarComoLeidas,
  enviarEmail,
  enviarSMS,
  obtenerConfiguracion,
  actualizarConfiguracion,
  verificarAlertas,
};

export default notificationService;