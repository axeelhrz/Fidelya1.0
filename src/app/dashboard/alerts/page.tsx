'use client';

import { useState } from 'react';
import {
  Box,
  Typography,
  Button,
  CircularProgress,
  Alert as MuiAlert,
  Fab,
  Container,
  Grid,
} from '@mui/material';
import {
  Add as AddIcon,
  Notifications as NotificationsIcon,
} from '@mui/icons-material';
import { useAlerts, useAlertStats } from '@/hooks/useAlerts';
import { usePatients } from '@/hooks/usePatients';
import { Alert, AlertFilters, AlertFormData } from '@/types/alert';
import AlertsTable from '@/components/alerts/AlertsTable';
import AlertFiltersComponent from '@/components/alerts/AlertFilters';
import AlertDialog from '@/components/alerts/AlertDialog';
import DashboardCard from '@/components/metrics/DashboardCard';
import DashboardLayout from '@/components/layout/DashboardLayout';
import ProtectedRoute from '@/components/auth/ProtectedRoute';
import { DashboardCard as DashboardCardType } from '@/types/metrics';

export default function AlertsPage() {
  const [filters, setFilters] = useState<AlertFilters>({});
  const [dialogOpen, setDialogOpen] = useState(false);
  const [editingAlert, setEditingAlert] = useState<Alert | null>(null);

  const { alerts, loading, error, createAlert, resolveAlert, cancelAlert, deleteAlert } = useAlerts(filters);
  const { patients } = usePatients();
  const { stats, loading: statsLoading } = useAlertStats();

  const handleCreateAlert = async (alertData: AlertFormData) => {
    await createAlert(alertData);
    setDialogOpen(false);
  };

  const handleEditAlert = (alert: Alert) => {
    setEditingAlert(alert);
    setDialogOpen(true);
  };

  const handleResolveAlert = async (alertId: string) => {
    await resolveAlert(alertId, 'Alerta resuelta desde la interfaz');
  };

  const handleCancelAlert = async (alertId: string) => {
    await cancelAlert(alertId, 'Alerta cancelada desde la interfaz');
  };

  const handleDeleteAlert = async (alertId: string) => {
    if (confirm('¿Está seguro de que desea eliminar esta alerta?')) {
      await deleteAlert(alertId);
    }
  };

  const handleCloseDialog = () => {
    setDialogOpen(false);
    setEditingAlert(null);
  };

  const clearFilters = () => {
    setFilters({});
  };

  // Preparar tarjetas de estadísticas
  const statsCards: DashboardCardType[] = [
    {
      id: 'active-alerts',
      title: 'Alertas Activas',
      value: stats?.active || 0,
      subtitle: 'Requieren atención',
      icon: 'notifications',
      color: 'primary',
    },
    {
      id: 'high-urgency',
      title: 'Alta Urgencia',
      value: stats?.highUrgency || 0,
      subtitle: 'Críticas y altas',
      icon: 'warning',
      color: 'error',
    },
    {
      id: 'resolved',
      title: 'Resueltas',
      value: stats?.resolved || 0,
      subtitle: 'Completadas',
      icon: 'check_circle',
      color: 'success',
    },
    {
      id: 'auto-generated',
      title: 'Automáticas',
      value: stats?.autoGenerated || 0,
      subtitle: 'Generadas por IA',
      icon: 'auto_awesome',
      color: 'secondary',
    },
    {
      id: 'total-alerts',
      title: 'Total',
      value: stats?.total || 0,
      subtitle: 'Todas las alertas',
      icon: 'assessment',
      color: 'info',
    },
    {
      id: 'cancelled',
      title: 'Canceladas',
      value: stats?.cancelled || 0,
      subtitle: 'No procesadas',
      icon: 'cancel',
      color: 'warning',
    },
  ];

  if (loading && alerts.length === 0) {
    return (
      <ProtectedRoute requiredRoles={['admin', 'psychologist']}>
        <DashboardLayout>
          <Container maxWidth="xl" sx={{ py: 4 }}>
            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 400 }}>
              <CircularProgress size={60} />
            </Box>
          </Container>
        </DashboardLayout>
      </ProtectedRoute>
    );
  }

  return (
    <ProtectedRoute requiredRoles={['admin', 'psychologist']}>
      <DashboardLayout>
        <Container maxWidth="xl" sx={{ py: 4 }}>
          {/* Header */}
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <NotificationsIcon sx={{ mr: 2, fontSize: 32, color: 'primary.main' }} />
              <Box>
                <Typography variant="h4" component="h1" fontWeight="bold">
                  Alertas Clínicas
                </Typography>
                <Typography variant="subtitle1" color="text.secondary">
                  Gestión y seguimiento de alertas del sistema
                </Typography>
              </Box>
            </Box>
            <Button
              variant="contained"
              startIcon={<AddIcon />}
              onClick={() => setDialogOpen(true)}
              sx={{ px: 3, py: 1.5 }}
            >
              Nueva Alerta
            </Button>
          </Box>

          {/* Error Alert */}
          {error && (
            <Box sx={{ mb: 4 }}>
              <MuiAlert severity="error">
                {error}
              </MuiAlert>
            </Box>
          )}

          {/* Stats Cards - Grid uniforme igual que métricas */}
          <Grid container spacing={3} sx={{ mb: 4 }}>
            {statsCards.map((card) => (
              <Grid item xs={12} sm={6} md={4} lg={2} key={card.id}>
                <DashboardCard card={card} loading={statsLoading} />
              </Grid>
            ))}
          </Grid>

          {/* Filters */}
          <Box sx={{ mb: 4 }}>
            <AlertFiltersComponent
              filters={filters}
              onFiltersChange={setFilters}
              onClearFilters={clearFilters}
            />
          </Box>

          {/* Alerts Table */}
          <Box sx={{ mb: 4 }}>
            <AlertsTable
              alerts={alerts}
              patients={patients}
              onEdit={handleEditAlert}
              onResolve={handleResolveAlert}
              onCancel={handleCancelAlert}
              onDelete={handleDeleteAlert}
              loading={loading}
            />
          </Box>

          {/* Floating Action Button */}
          <Fab
            color="primary"
            aria-label="add"
            sx={{ position: 'fixed', bottom: 24, right: 24 }}
            onClick={() => setDialogOpen(true)}
          >
            <AddIcon />
          </Fab>

          {/* Alert Dialog */}
          <AlertDialog
            open={dialogOpen}
            onClose={handleCloseDialog}
            onSave={handleCreateAlert}
            alert={editingAlert}
          />
        </Container>
      </DashboardLayout>
    </ProtectedRoute>
  );
}