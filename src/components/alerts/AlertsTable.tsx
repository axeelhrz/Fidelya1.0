'use client';

import { useState } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Menu,
  MenuItem,
  Typography,
  Box,
  Chip,
  Tooltip,
  Avatar,
} from '@mui/material';
import {
  MoreVert as MoreVertIcon,
  Edit as EditIcon,
  Check as CheckIcon,
  Cancel as CancelIcon,
  Delete as DeleteIcon,
  AutoAwesome as AutoAwesomeIcon,
  Person as PersonIcon,
  Schedule as ScheduleIcon,
  Warning as WarningIcon,
} from '@mui/icons-material';
import { format } from 'date-fns';
import { es } from 'date-fns/locale';
import { ClinicalAlert, ALERT_TYPE_LABELS, ALERT_TRIGGER_LABELS } from '@/types/alert';
import { Patient } from '@/types/patient';
import AlertBadge from './AlertBadge';

interface AlertsTableProps {
  alerts: ClinicalAlert[];
  patients: Patient[];
  onEdit: (alert: ClinicalAlert) => void;
  onResolve: (alertId: string) => void;
  onCancel: (alertId: string) => void;
  onDelete: (alertId: string) => void;
  loading?: boolean;
}

export default function AlertsTable({
  alerts,
  patients,
  onEdit,
  onResolve,
  onCancel,
  onDelete,
  loading = false,
}: AlertsTableProps) {
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const [selectedAlert, setSelectedAlert] = useState<ClinicalAlert | null>(null);

  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, alert: ClinicalAlert) => {
    setAnchorEl(event.currentTarget);
    setSelectedAlert(alert);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    setSelectedAlert(null);
  };

  const handleMenuAction = (action: () => void) => {
    action();
    handleMenuClose();
  };

  const getPatientName = (patientId: string) => {
    const patient = patients.find(p => p.id === patientId);
    return patient?.fullName || 'Paciente no encontrado';
  };

  const getUrgencyIcon = (urgency: string) => {
    switch (urgency) {
      case 'alta':
        return <WarningIcon color="error" />;
      case 'media':
        return <ScheduleIcon color="warning" />;
      default:
        return <PersonIcon color="success" />;
    }
  };

  if (alerts.length === 0) {
    return (
      <Paper sx={{ p: 4, textAlign: 'center' }}>
        <Typography variant="h6" color="text.secondary">
          No hay alertas que mostrar
        </Typography>
        <Typography variant="body2" color="text.secondary">
          Las alertas aparecerán aquí cuando se creen o se activen automáticamente
        </Typography>
      </Paper>
    );
  }

  return (
    <>
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Paciente</TableCell>
              <TableCell>Tipo</TableCell>
              <TableCell>Descripción</TableCell>
              <TableCell>Urgencia</TableCell>
              <TableCell>Estado</TableCell>
              <TableCell>Fecha</TableCell>
              <TableCell>Acciones</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {alerts.map((alert) => (
              <TableRow key={alert.id} hover>
                <TableCell>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <Avatar sx={{ width: 32, height: 32, fontSize: '0.875rem' }}>
                      {getPatientName(alert.patientId).charAt(0)}
                    </Avatar>
                    <Box>
                      <Typography variant="body2" fontWeight="medium">
                        {getPatientName(alert.patientId)}
                      </Typography>
                      {alert.autoGenerated && (
                        <Chip
                          icon={<AutoAwesomeIcon />}
                          label="Automática"
                          size="small"
                          variant="outlined"
                          sx={{ mt: 0.5, fontSize: '0.7rem', height: 20 }}
                        />
                      )}
                    </Box>
                  </Box>
                </TableCell>
                
                <TableCell>
                  <Box>
                    <Typography variant="body2" fontWeight="medium">
                      {ALERT_TYPE_LABELS[alert.type]}
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      {ALERT_TRIGGER_LABELS[alert.trigger]}
                    </Typography>
                  </Box>
                </TableCell>
                
                <TableCell>
                  <Tooltip title={alert.description} arrow>
                    <Typography 
                      variant="body2" 
                      sx={{ 
                        maxWidth: 200,
                        overflow: 'hidden',
                        textOverflow: 'ellipsis',
                        whiteSpace: 'nowrap'
                      }}
                    >
                      {alert.description}
                    </Typography>
                  </Tooltip>
                  {alert.scheduledFor && (
                    <Typography variant="caption" color="text.secondary" display="block">
                      Programada: {format(new Date(alert.scheduledFor), 'dd/MM/yyyy HH:mm', { locale: es })}
                    </Typography>
                  )}
                </TableCell>
                
                <TableCell>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    {getUrgencyIcon(alert.urgency)}
                    <AlertBadge urgency={alert.urgency} />
                  </Box>
                </TableCell>
                
                <TableCell>
                  <AlertBadge status={alert.status} />
                </TableCell>
                
                <TableCell>
                  <Typography variant="body2">
                    {format(new Date(alert.createdAt), 'dd/MM/yyyy', { locale: es })}
                  </Typography>
                  <Typography variant="caption" color="text.secondary">
                    {format(new Date(alert.createdAt), 'HH:mm', { locale: es })}
                  </Typography>
                </TableCell>
                
                <TableCell>
                  <IconButton
                    size="small"
                    onClick={(e) => handleMenuOpen(e, alert)}
                  >
                    <MoreVertIcon />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
      >
        {selectedAlert?.status === 'activa' && (
          <MenuItem onClick={() => handleMenuAction(() => onEdit(selectedAlert!))}>
            <EditIcon sx={{ mr: 1 }} />
            Editar
          </MenuItem>
        )}
        
        {selectedAlert?.status === 'activa' && (
          <MenuItem onClick={() => handleMenuAction(() => onResolve(selectedAlert!.id))}>
            <CheckIcon sx={{ mr: 1 }} />
            Marcar como resuelta
          </MenuItem>
        )}
        
        {selectedAlert?.status === 'activa' && (
          <MenuItem onClick={() => handleMenuAction(() => onCancel(selectedAlert!.id))}>
            <CancelIcon sx={{ mr: 1 }} />
            Cancelar alerta
          </MenuItem>
        )}
        
        <MenuItem 
          onClick={() => handleMenuAction(() => onDelete(selectedAlert!.id))}
          sx={{ color: 'error.main' }}
        >
          <DeleteIcon sx={{ mr: 1 }} />
          Eliminar
        </MenuItem>
      </Menu>
    </>
  );
}
