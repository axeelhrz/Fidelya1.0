import { Timestamp } from 'firebase/firestore';

export type AlertType = 
  | 'appointment'
  | 'medication'
  | 'followup'
  | 'emergency'
  | 'custom';

export type AlertStatus = 
  | 'active'
  | 'resolved'
  | 'cancelled'
  | 'expired';

export type AlertUrgency = 
  | 'low'
  | 'medium'
  | 'high'
  | 'critical';

export type NotificationChannel = 
  | 'email'
  | 'whatsapp'
  | 'sms'
  | 'push';

export interface Alert {
  id: string;
  centerId: string;
  patientId: string;
  psychologistId: string;
  type: AlertType;
  title: string;
  description: string;
  urgency: AlertUrgency;
  status: AlertStatus;
  scheduledFor: Date;
  createdAt: Date;
  updatedAt: Date;
  resolvedAt?: Date;
  resolvedBy?: string;
  resolutionNotes?: string;
  cancelledAt?: Date;
  cancelledBy?: string;
  cancellationReason?: string;
  notificationChannels: NotificationChannel[];
  isAutoGenerated: boolean;
  metadata?: {
    sessionId?: string;
    appointmentId?: string;
    medicationId?: string;
    customData?: Record<string, any>;
  };
}

export interface AlertFormData {
  trigger: string;
  patientId: string;
  type: AlertType;
  title: string;
  description: string;
  urgency: AlertUrgency;
  scheduledFor: Date;
  notificationChannels: NotificationChannel[];
  metadata?: {
    sessionId?: string;
    appointmentId?: string;
    medicationId?: string;
    customData?: Record<string, any>;
  };
}

export interface AlertFilters {
  patientId?: string;
  psychologistId?: string;
  type?: AlertType;
  status?: AlertStatus;
  urgency?: AlertUrgency;
  dateFrom?: Date;
  dateTo?: Date;
  isAutoGenerated?: boolean;
  search?: string;
}

export interface AlertStats {
  total: number;
  active: number;
  resolved: number;
  cancelled: number;
  expired: number;
  highUrgency: number;
  autoGenerated: number;
  byType: Record<AlertType, number>;
  byUrgency: Record<AlertUrgency, number>;
}

export interface AlertNotification {
  id: string;
  alertId: string;
  channel: NotificationChannel;
  recipient: string;
  sentAt: Date;
  status: 'pending' | 'sent' | 'delivered' | 'failed';
  errorMessage?: string;
  retryCount: number;
  maxRetries: number;
}

export interface AlertTemplate {
  id: string;
  centerId: string;
  name: string;
  type: AlertType;
  title: string;
  description: string;
  urgency: AlertUrgency;
  notificationChannels: NotificationChannel[];
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export interface AlertRule {
  id: string;
  centerId: string;
  name: string;
  description: string;
  isActive: boolean;
  conditions: {
    patientCriteria?: {
      ageRange?: { min: number; max: number };
      diagnosis?: string[];
      riskLevel?: string[];
    };
    sessionCriteria?: {
      missedAppointments?: number;
      daysSinceLastSession?: number;
      emotionalState?: string[];
    };
    timeCriteria?: {
      daysOfWeek?: number[];
      timeOfDay?: { start: string; end: string };
      frequency?: 'daily' | 'weekly' | 'monthly';
    };
  };
  actions: {
    createAlert: {
      type: AlertType;
      title: string;
      description: string;
      urgency: AlertUrgency;
      notificationChannels: NotificationChannel[];
    };
  };
  createdAt: Date;
  updatedAt: Date;
}

// Constantes para alertas
export const ALERT_TYPES: AlertType[] = ['appointment', 'medication', 'followup', 'emergency', 'custom'];
export const ALERT_STATUSES: AlertStatus[] = ['active', 'resolved', 'cancelled', 'expired'];
export const ALERT_URGENCIES: AlertUrgency[] = ['low', 'medium', 'high', 'critical'];

export const ALERT_TYPE_LABELS: Record<AlertType, string> = {
  'appointment': 'Cita',
  'medication': 'Medicamento',
  'followup': 'Seguimiento',
  'emergency': 'Emergencia',
  'custom': 'Personalizada'
};

export const ALERT_TRIGGER_LABELS: Record<AlertTrigger, string> = {
  'fecha_programada': 'Fecha programada',
  'texto_IA': 'Análisis de IA',
  'falta_sesión': 'Falta de sesión'
};

export const ALERT_URGENCY_LABELS: Record<AlertUrgency, string> = {
  'low': 'Baja',
  'medium': 'Media',
  'high': 'Alta',
  'critical': 'Crítica'
};

export const ALERT_STATUS_LABELS: Record<AlertStatus, string> = {
  'active': 'Activa',
  'resolved': 'Resuelta',
  'cancelled': 'Cancelada',
  'expired': 'Expirada'
};

export const ALERT_URGENCY_COLORS: Record<AlertUrgency, string> = {
  'low': '#4caf50',
  'medium': '#ff9800',
  'high': '#f44336',
  'critical': '#f44336'
};

export const ALERT_STATUS_COLORS: Record<AlertStatus, string> = {
  'active': '#2196f3',
  'resolved': '#4caf50',
  'cancelled': '#9e9e9e',
  'expired': '#9e9e9e'
};

// Configuración de notificaciones WhatsApp
export interface WhatsAppTemplate {
  id: string;
  name: string;
  language: string;
  components: {
    type: 'HEADER' | 'BODY' | 'FOOTER';
    parameters?: { type: 'TEXT'; text: string }[];
  }[];
}

export const WHATSAPP_TEMPLATES: Record<string, WhatsAppTemplate> = {
  patient_reminder: {
    id: 'patient_reminder',
    name: 'patient_session_reminder',
    language: 'es',
    components: [
      {
        type: 'BODY',
        parameters: [
          { type: 'TEXT', text: '{{1}}' }, // Nombre del paciente
          { type: 'TEXT', text: '{{2}}' }, // Fecha y hora
          { type: 'TEXT', text: '{{3}}' }  // Nombre del profesional
        ]
      }
    ]
  },
  professional_alert: {
    id: 'professional_alert',
    name: 'professional_alert',
    language: 'es',
    components: [
      {
        type: 'BODY',
        parameters: [
          { type: 'TEXT', text: '{{1}}' }, // Tipo de alerta
          { type: 'TEXT', text: '{{2}}' }, // Nombre del paciente
          { type: 'TEXT', text: '{{3}}' }  // Descripción
        ]
      }
    ]
  },
  emergency_alert: {
    id: 'emergency_alert',
    name: 'emergency_alert',
    language: 'es',
    components: [
      {
        type: 'HEADER'
      },
      {
        type: 'BODY',
        parameters: [
          { type: 'TEXT', text: '{{1}}' }, // Nombre del paciente
          { type: 'TEXT', text: '{{2}}' }  // Descripción de la crisis
        ]
      }
    ]
  }
};

// Log de acciones de alertas
export interface AlertActionLog {
  id: string;
  centerId: string;
  alertId: string;
  action: 'created' | 'triggered' | 'resolved' | 'cancelled' | 'notification_sent' | 'notification_failed';
  performedBy: string; // 'system' para acciones automáticas
  details: string;
  timestamp: Date;
  metadata?: Record<string, any>;
}