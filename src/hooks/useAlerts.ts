import { useState, useEffect, useCallback } from 'react';
import { useAuth } from '@/context/AuthContext';
import { ClinicalAlert, AlertFilters, AlertFormData } from '@/types/alert';
import { FirestoreService } from '@/services/firestore';
import { AlertService } from '@/services/alertService';
import { useCollection } from './useFirestore';
import { query, where, orderBy } from 'firebase/firestore';

export function useAlerts(filters?: AlertFilters) {
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Construir query constraints para useCollection
  const queryConstraints = [];
  
  if (filters?.status) {
    queryConstraints.push(where('status', '==', filters.status));
  }
  
  if (filters?.type) {
    queryConstraints.push(where('type', '==', filters.type));
  }
  
  if (filters?.urgency) {
    queryConstraints.push(where('urgency', '==', filters.urgency));
  }
  
  if (filters?.patientId) {
    queryConstraints.push(where('patientId', '==', filters.patientId));
  }
  
  if (filters?.createdBy) {
    queryConstraints.push(where('createdBy', '==', filters.createdBy));
  }

  queryConstraints.push(orderBy('createdAt', 'desc'));

  const collectionPath = user?.centerId ? `centers/${user.centerId}/alerts` : '';
  
  const { 
    data: alerts, 
    loading: collectionLoading, 
    error: collectionError 
  } = useCollection<ClinicalAlert>(collectionPath, queryConstraints);

  useEffect(() => {
    setLoading(collectionLoading);
    setError(collectionError?.message || null);
  }, [collectionLoading, collectionError]);

  // Aplicar filtros del lado del cliente
  const filteredAlerts = alerts.filter(alert => {
    if (filters?.search) {
      const searchTerm = filters.search.toLowerCase();
      if (!alert.description.toLowerCase().includes(searchTerm) &&
          !alert.notes?.toLowerCase().includes(searchTerm)) {
        return false;
      }
    }

    if (filters?.autoGenerated !== undefined) {
      if (alert.autoGenerated !== filters.autoGenerated) {
        return false;
      }
    }

    if (filters?.dateRange) {
      const alertDate = new Date(alert.createdAt);
      if (filters.dateRange.start && alertDate < new Date(filters.dateRange.start)) {
        return false;
      }
      if (filters.dateRange.end && alertDate > new Date(filters.dateRange.end)) {
        return false;
      }
    }

    return true;
  });

  const createAlert = useCallback(async (alertData: AlertFormData) => {
    if (!user?.centerId) throw new Error('No center ID available');
    
    try {
      return await AlertService.createAlert(user.centerId, alertData, user.uid);
    } catch (error) {
      console.error('Error creating alert:', error);
      throw error;
    }
  }, [user]);

  const updateAlert = useCallback(async (alertId: string, alertData: Partial<ClinicalAlert>) => {
    if (!user?.centerId) throw new Error('No center ID available');
    
    try {
      await FirestoreService.updateAlert(user.centerId, alertId, alertData);
    } catch (error) {
      console.error('Error updating alert:', error);
      throw error;
    }
  }, [user]);

  const resolveAlert = useCallback(async (alertId: string, notes?: string) => {
    if (!user?.centerId) throw new Error('No center ID available');
    
    try {
      await AlertService.resolveAlert(user.centerId, alertId, user.uid, notes);
    } catch (error) {
      console.error('Error resolving alert:', error);
      throw error;
    }
  }, [user]);

  const cancelAlert = useCallback(async (alertId: string, reason?: string) => {
    if (!user?.centerId) throw new Error('No center ID available');
    
    try {
      await AlertService.cancelAlert(user.centerId, alertId, user.uid, reason);
    } catch (error) {
      console.error('Error cancelling alert:', error);
      throw error;
    }
  }, [user]);

  const deleteAlert = useCallback(async (alertId: string) => {
    if (!user?.centerId) throw new Error('No center ID available');
    
    try {
      await FirestoreService.deleteAlert(user.centerId, alertId);
    } catch (error) {
      console.error('Error deleting alert:', error);
      throw error;
    }
  }, [user]);

  return {
    alerts: filteredAlerts,
    loading,
    error,
    createAlert,
    updateAlert,
    resolveAlert,
    cancelAlert,
    deleteAlert,
  };
}

export function useAlertStats() {
  const { user } = useAuth();
  const [stats, setStats] = useState({
    total: 0,
    active: 0,
    resolved: 0,
    highUrgency: 0,
    autoGenerated: 0,
    pendingNotifications: 0
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchStats = async () => {
      if (!user?.centerId) return;
      
      try {
        setLoading(true);
        const alertStats = await AlertService.getAlertStats(user.centerId);
        setStats(alertStats);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Error loading stats');
      } finally {
        setLoading(false);
      }
    };

    fetchStats();
  }, [user?.centerId]);

  return { stats, loading, error };
}

export function usePatientAlerts(patientId: string) {
  const { user } = useAuth();
  const [alerts, setAlerts] = useState<ClinicalAlert[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchPatientAlerts = async () => {
      if (!user?.centerId || !patientId) return;
      
      try {
        setLoading(true);
        const patientAlerts = await FirestoreService.getPatientAlerts(user.centerId, patientId);
        setAlerts(patientAlerts);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Error loading patient alerts');
      } finally {
        setLoading(false);
      }
    };

    fetchPatientAlerts();
  }, [user?.centerId, patientId]);

  return { alerts, loading, error };
}
