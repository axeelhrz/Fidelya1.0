// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(EMPLOYEE)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sales     Sale[]
  purchases Purchase[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Supplier {
  id          String  @id @default(cuid())
  name        String  @unique
  email       String?
  phone       String?
  address     String?
  taxId       String? // RUC o CUIT
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products  Product[]
  purchases Purchase[]

  @@map("suppliers")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  barcode     String?  @unique
  unit        String   // kg, unidad, litro, etc.
  costPrice   Float
  salePrice   Float
  stock       Float    @default(0)
  minStock    Float    @default(0)
  expiryDate  DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign Keys
  categoryId String
  supplierId String

  // Relations
  category          Category            @relation(fields: [categoryId], references: [id])
  supplier          Supplier            @relation(fields: [supplierId], references: [id])
  inventoryMovements InventoryMovement[]
  saleItems         SaleItem[]
  purchaseItems     PurchaseItem[]

  @@map("products")
}

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  phone     String?
  address   String?
  taxId     String? // DNI, CUIT
  notes     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sales Sale[]

  @@map("clients")
}

model Sale {
  id          String   @id @default(cuid())
  saleNumber  String   @unique
  total       Float
  subtotal    Float
  tax         Float    @default(0)
  discount    Float    @default(0)
  paymentMethod PaymentMethod @default(CASH)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign Keys
  clientId String?
  userId   String

  // Relations
  client    Client?    @relation(fields: [clientId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
  saleItems SaleItem[]

  @@map("sales")
}

model SaleItem {
  id       String @id @default(cuid())
  quantity Float
  price    Float
  subtotal Float

  // Foreign Keys
  saleId    String
  productId String

  // Relations
  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

model Purchase {
  id            String   @id @default(cuid())
  purchaseNumber String  @unique
  total         Float
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Foreign Keys
  supplierId String
  userId     String

  // Relations
  supplier      Supplier       @relation(fields: [supplierId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  purchaseItems PurchaseItem[]

  @@map("purchases")
}

model PurchaseItem {
  id       String @id @default(cuid())
  quantity Float
  cost     Float
  subtotal Float

  // Foreign Keys
  purchaseId String
  productId  String

  // Relations
  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id])

  @@map("purchase_items")
}

model InventoryMovement {
  id          String      @id @default(cuid())
  type        MovementType
  quantity    Float
  previousStock Float
  newStock    Float
  reason      String?
  createdAt   DateTime    @default(now())

  // Foreign Keys
  productId String

  // Relations
  product Product @relation(fields: [productId], references: [id])

  @@map("inventory_movements")
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@map("notifications")
}

// Enums
enum Role {
  ADMIN
  EMPLOYEE
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
  CREDIT
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}